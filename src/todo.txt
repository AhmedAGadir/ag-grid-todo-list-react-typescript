/** @ignore *//** */

// tags
// typescript - <> and interfaces etc and more - study
// modularise 

// handle key presses in date 
// add ag-grid interfaces, and loads of typescript goodies,
// read typescript

// tooltip for the dates saying you have X days remaining 
// account for enter
// cleanup
// hover 
// save / cancel edits 
// stop other dates from editing
// instead of using events, use the setCurrentlyEditingId stuff and refreshing 
// checkboxes shouldnt share a renderer with save/cancel - they should be their own column

make the sass mixin work
flickering checkboxes

t2

account for row dragging order

null checks??

fix the id types

if you are reusing types put the in the same folder 


use JSDOC/TSDOC on everything - search: when/how to use JSDOC?
https://www.carlrippon.com/building-super-simple-react-form-component-typescript-basics/

make all methods private/public 

TYPE THE JSX ELEMENTS IN EVERY RENDER METHOD E.G. REACT.REACTELEMENT<HTMLDIVELEMENT> (-- READ HOW TO DO THIS)

AND THE GENERICS FOR THE RENDER RETURN TYPE E,G, : React.ReactElement<HTMLDivElement> (-- READ HOW TO DO THIS)

https://medium.com/better-programming/typescript-reactjs-the-element-vs-reactelement-vs-htmlelement-vs-node-confusion-6cda21315ddd

https://medium.com/@tiago.souto/most-common-react-app-types-using-typescript-99f4d5d4c4f8

GOOGLE COMMON REACT TYPESCRIPT USES


// THE RETURN PROP IS A PROBLEM WHEN YOU HOVER
// APP.TSX IS BARKING ABOUT THE PROPERTY THAT GETS PASSED HERE 

difference between react node, react element etc - use it in code.

LIST OF 10 QUESTIONS FOR ALBERTO:
1) REACT.CREATECONTEXT TAKES A GENERIC = CAN YOU SHOW ME HOW YOU KNOW THE PURPOSE OF THIS GENERIC 
2) editingId props in grid ? ignore it (!)? remove it? 

modules and namespaces

tsdoc/typedoc

WHAT DOES THE REACT.REACTELEMENT HOVER STUFF MEAN??

render(): React.ReactElement<{ mockEditing: boolean } extends P> {






    ==============

    import React from 'react';
import { ICellRendererParams } from 'ag-grid-community';
import { MockEditingContext, IMockEditingContext } from '../context/MockEditingContext';


export interface IMockEditingCellRenderer extends React.ComponentClass, React.Component implements {
    commitChanges: () => void,
    cancelChanges: () => void
}

interface MockEditingCellRenderer {
    mockEditing: boolean,
}

const MockEditingCellRenderer = (CellRendererComp: any): React.ComponentClass => {

    return class extends React.Component {
        static contextType: React.Context<IMockEditingContext> = MockEditingContext;

        constructor(props: any) {
            super(props);
            this.state = {
                mockEditing: false,
            }
        }

        public refresh(): boolean {
            this.setState({ mockEditing: this.context.mockEditingId === (this.props as any).node.id });
            return true;
        }

        public componentDidMount(): void {
            (this.props as any).api.addEventListener('commitChanges', this.commitChanges);
            (this.props as any).api.addEventListener('cancelChanges', this.cancelChanges);

            // CellRendererComp.componentDidMount();
        }

        public componentWillUnmount(): void {
            (this.props as any).api.removeEventListener('commitChanges', this.commitChanges);
            (this.props as any).api.removeEventListener('cancelChanges', this.cancelChanges);

            // CellRendererComp.componentWillMount();
        }

        commitChanges() {
            if ((this.state as any).mockEditing) {
                CellRendererComp.commitChanges();
            }
        }

        cancelChanges() {
            if ((this.state as any).mockEditing) {
                CellRendererComp.cancelChanges();
            }
        }

        render(): React.ReactElement {
            // mockEditing state passed for styling/rendering 
            {/* 
				// @ts-ignore */}
            return <CellRendererComp {...this.props} mockEditing={(this.state as any).mockEditing} />
        };
    }
}

export default MockEditingCellRenderer;



==================



GRID.TSX
context = mockEditingContext

stopMockEditing(boolean) {
    let mockEditingNode = this.gridApi.getRowNode(this.mockEditingId);
    let updateData = {...node.data};
    forEach(cellRenderer) in mockEditingNode {
        if (cellRenderer instanceof ImockEditingCellRenderer) {
            if (bool) {
                updatedData[field] = cellRenderer.getValue() 
            }
        }
    }
    mockEditingNode.setData(updatedData)
}